/*
 * JKeyedMulti.java
 *
 * Created on April 5, 2008, 8:16 PM
 */

package citibob.swing.typed;

import citibob.jschema.Column;
import citibob.jschema.Schema;
import citibob.jschema.SchemaSet;
import citibob.swing.table.FixedColTableModel;
import citibob.swing.table.JTypeTableModel;
import citibob.swing.typed.JKeyedComboBox;
import citibob.swing.typed.TypedWidget;
import citibob.swingers.BoolSwinger;
import citibob.swingers.KeyedRenderEdit;
import citibob.text.KeyedSFormat;
import citibob.text.SFormat;
import citibob.types.JEnum;
import citibob.types.JType;
import citibob.types.JavaJType;
import citibob.types.KeyedModel;
import java.awt.Component;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 NOTE: Unliked most TypedWidgets, this does NOT fire propertyChange("value") events.
 @author  citibob
 */
public class JKeyedMultiPanel extends javax.swing.JPanel
implements KeyedModel.Listener, TypedWidget
{

KeyedModel kmodel;
Object segment;
JType valueType;			// Type of value portion of kmodel
Vector vals;				// The values that we can return in our set
//Set selected;					// The set of items selected
boolean[] selected;
//List xtra;					// Extra items we have in our value but cannot display...
protected SFormat kformatter;
List val;					// Value we return overall as a typed widget


	/** Creates new form JKeyedMulti */
	public JKeyedMultiPanel()
	{
		initComponents();
		
		JTypeTableModel tmodel = new MyModel();
		table.setModelU(tmodel, new String[] {"",""}, null, editable);
			BoolSwinger bswing = new BoolSwinger();
			Component checkbox = (Component)bswing.newWidget();
			table.setRenderEdit(C_CHECK, bswing);
			int width = checkbox.getPreferredSize().width;
System.out.println("checkbox width = " + width);
			table.getColumnModel().getColumn(C_CHECK).setMaxWidth(width);
		table.setRowSelectionAllowed(false);
		table.setCellSelectionEnabled(false);
		
		lSelectedCount.setJType(Integer.class, "#");
		lSelectedCount.setValue(0);
//		table.setSelectionBackground(table.getBackground());
	}
	
	/** This method is called from within the constructor to
	 initialize the form.
	 WARNING: Do NOT modify  this code. The content of this method is
	 always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new citibob.swing.JTypeColTable();
        jPanel1 = new javax.swing.JPanel();
        lSelectStatus = new javax.swing.JLabel();
        lSelectedCount = new citibob.swing.typed.JTypedLabel();

        setLayout(new java.awt.BorderLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        lSelectStatus.setText("Selected: ");
        jPanel1.add(lSelectStatus);

        lSelectedCount.setText("jTypedLabel1");
        jPanel1.add(lSelectedCount);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lSelectStatus;
    private citibob.swing.typed.JTypedLabel lSelectedCount;
    private citibob.swing.JTypeColTable table;
    // End of variables declaration//GEN-END:variables

	

// --------------------------------------------------------------
/** Convenience method */
public void setKeyedModel(JEnum jenum)
	{ setKeyedModel(jenum.getKeyedModel(), jenum.getSegment()); }
/** Convenience method: sets dropdown equal to the type of the column;
 column must be of type JEnum. */
public void setKeyedModel(Column col)
	{ setKeyedModel((JEnum)col.getType()); }
/** Convenience method: sets dropdown equal to the type of the column.
 Column must be of type JEnum*/
public void setKeyedModel(Schema schema, String colName)
	{ setKeyedModel(schema.getCol(colName)); }
public void setKeyedModel(SchemaSet sset, String schemaName, String colName)
	{ setKeyedModel(sset.get(schemaName), colName); }


public void setKeyedModel(KeyedModel kmodel)
	{ setKeyedModel(kmodel, null); }

public void setKeyedModel(KeyedModel kmodel, Object segment)
{
	table.setRenderEdit(C_VALUE, new KeyedRenderEdit(kmodel));
	if (this.kmodel != null) {
		this.kmodel.removeListener(this);
	}
	this.kmodel = kmodel;
	this.kformatter = new KeyedSFormat(kmodel);
	this.segment = segment;
	kmodel.addListener(this);
	refreshKeyedModel();
}
public void setSegment(Object segment)
{
	this.segment = segment;
	refreshKeyedModel();
}
public void refreshKeyedModel()
{
	Object val = getValue();
	vals = kmodel.newKeyList(segment, JKeyedComboBox.NULL);
	selected = new boolean[vals.size()];
	setValue(val);
	((MyModel)table.getModelU()).fireTableDataChanged();
}
public KeyedModel getKeyedModel()
{ return kmodel; }
// ===========================================================
// TypedWidget
public boolean isInstance(Object obj)
{
	if (obj == null) return kmodel.containsKey(null);
	return obj instanceof Set;
}
public List getValue()
{
	stopEditing();
	return val;
}

public void setValue(Object xval)
{
	if (xval == null) {
		for (int i=0; i < selected.length; ++i) selected[i] = false;
	} else if (xval instanceof Collection) {
		Set set = new TreeSet((Collection)xval);
		int count = 0;
		for (int i=0; i < selected.length; ++i) {
			boolean contains = set.contains(vals.get(i));
			selected[i] = contains;
			if (contains) ++count;
		}
		lSelectedCount.setValue(count);
	} else {
		int count = 0;
		for (int i=0; i < selected.length; ++i) {
			boolean contains = (vals.get(i).equals(xval));
			selected[i] = contains;
			if (contains) ++count;
		}
		lSelectedCount.setValue(count);
	}
	isEditing = true;
}
// --------------------------------------------------------------
// TypedWidget
String colName;
/** Row (if any) in a RowModel we will bind this to at runtime. */
public String getColName() { return colName; }
/** Row (if any) in a RowModel we will bind this to at runtime. */
public void setColName(String col) { colName = col; }

boolean isEditing = false;
/** From TableCellEditor (in case this is being used in a TableCellEditor):
 * Tells the editor to stop editing and accept any partially edited value
 * as the value of the editor. The editor returns false if editing was not
 * stopped; this is useful for editors that validate and can not accept
 * invalid entries. */
public boolean stopEditing() {
	if (!isEditing) return true;

	if (table.getCellEditor() != null) table.getCellEditor().stopCellEditing();
	val = new LinkedList();
//System.out.println("cell editor = " + table.getCellEditor());
System.out.print("Stop editing: ");
	for (int i=0; i < selected.length; ++i) {
		if (selected[i]) {
			val.add(vals.get(i));
System.out.print(vals.get(i));
		}
	}
System.out.println("");
	return true;
}

public Object clone() throws CloneNotSupportedException { return super.clone(); }

// ===========================================================
// KeyedModel.Listener
public void keyedModelChanged()
	{ refreshKeyedModel(); }
// ===========================================================
static final String[] colNames = {"Chosen", "Item"};
static final boolean[] editable = {true, false};

static final int C_CHECK = 0;
static final int C_VALUE = 1;


public class MyModel extends FixedColTableModel
{

	public MyModel()
	{
		super(colNames,
			new JType[] {JavaJType.jtBoolean, valueType},
			editable);
	}

	public Object getValueAt(int row, int col)
	{
		switch(col) {
			case C_CHECK : return (selected[row] ? Boolean.TRUE : Boolean.FALSE);
			case C_VALUE : return vals.get(row);
		}
		return null;
	}
	public void setValueAt(Object val, int row, int col)
	{
		switch(col) {
			case C_CHECK : {
				boolean oldVal = selected[row];
				boolean newVal = (Boolean)val;
				selected[row] = newVal;
				int count = (Integer)lSelectedCount.getValue();
				if (oldVal && !newVal) {
					lSelectedCount.setValue(count - 1);
				} else if (newVal && !oldVal) {
					lSelectedCount.setValue(count + 1);
				}
//System.out.println("setValueAt(" + row + ") = " + val);
				isEditing = true;
			}
		}
		super.fireTableRowsUpdated(row, row);
	}
public int getRowCount()
	{ return (vals == null ? 0 : vals.size()); }

}

// ==================================================================
public static void main(String[] args) throws Exception
{
	KeyedModel kmodel = KeyedModel.intKeys("Item 0", "Item 1", "item 2");
	
	JKeyedMultiPanel multi = new JKeyedMultiPanel();
	multi.setKeyedModel(kmodel);
	
	JFrame frame = new JFrame();
	JPanel panel = new JPanel();
	panel.add(multi);
	frame.getContentPane().add(panel);
	frame.pack();
	frame.setVisible(true);
}

}
